Given a string consisting of digits 0-9, count the number of subsequences in it divisible by m.
Examples:
This problem can be recursively defined. Let remainder of a string with value x be ‘r’ when divided with n. Adding one more character to this string changes its remainder to (r*10 + newdigit) % n. For every new character, we have two choices, either add it in all current subsequences or ignore it. Thus, we have an optimal substructure. Following shows the brute force version of this:
The above recursive solution has overlapping subproblems as shown in below recursion tree.
Thus, we can apply Dynamic Programming. Below is implementation of same in C++.
Run on IDE
Output:
Time Complexity  : O(len * n)
Auxiliary Space  : O(len * n)
