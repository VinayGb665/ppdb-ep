Given a directed graph, check whether the graph contains a cycle or not. Your function should return true if the given graph contains at least one cycle, else return false. For example, the following graph contains three cycles 0->2->0, 0->1->2->0 and 3->3, so your function must return true.
Solution
Depth First Traversal can be used to detect cycle in a Graph. DFS for a connected graph produces a tree. There is a cycle in a graph only if there is a back edge present in the graph. A back edge is an edge that is from a node to itself (selfloop) or one of its ancestor in the tree produced by DFS. In the following graph, there are 3 back edges, marked with cross sign. We can observe that these 3 back edges indicate 3 cycles present in the graph.

For a disconnected graph, we get the DFS forest as output. To detect cycle, we can check for cycle in individual trees by checking back edges.

Image Source: http://www.cs.yale.edu/homes/aspnes/pinewiki/DepthFirstSearch.html
In the previous post, we have discussed a solution that stores visited vertices in a separate array which stores vertices of current recursion call stack.
In this post a different solution is discussed.  The solution is from CLRS book.  The idea is to do DFS of given graph and while doing traversal, assign one of the below three colors to every vertex.
Below is C++ implementation based on above idea.
Run on IDE
Run on IDE

Time complexity of above solution is O(V + E) where V is number of vertices and E is number of edges in the graph.

