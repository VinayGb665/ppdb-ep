Given an integer array and a positive integer k, count all distinct pairs with difference equal to k. 
Examples: 
Method 1 (Simple) 
A simple solution is to consider all pairs one by one and check difference between every pair. Following program implements the simple solution. We run two loops: the outer loop picks the first element of pair, the inner loop looks for the other element. This solution doesnâ€™t work if there are duplicates in array as the requirement is to count only distinct pairs.
Run on IDE
Run on IDE
Run on IDE
Run on IDE
Run on IDE

Time Complexity of O(n2)
Method 2 (Use Sorting)
We can find the count in O(nLogn) time using a O(nLogn) sorting algorithm like Merge Sort, Heap Sort, etc.  Following are the detailed steps. 
Run on IDE
Run on IDE
Run on IDE
Run on IDE
Run on IDE

Time complexity: The first step (sorting) takes O(nLogn) time.  The second step runs binary search n times, so the time complexity of second step is also O(nLogn). Therefore, overall time complexity is O(nLogn). The second step can be optimized to O(n), see this.
Method 3 (Use Self-balancing BST)
We can also a self-balancing BST like AVL tree or Red Black tree to solve this problem.  Following is detailed algorithm.
Time complexity of above solution is also O(nLogn) as search and delete operations take O(Logn) time for a self-balancing binary search tree.
Method 4 (Use Hashing)
We can also use hashing to achieve the average time complexity as O(n) for many cases.
A very simple case where hashing works in O(n) time is the case where range of values is very small.  For example, in the following implementation, range of numbers is assumed to be 0 to 99999. A simple hashing technique to use values as index can be used.
Run on IDE
Method 5 (Use Sorting)
Run on IDE
Run on IDE
Run on IDE
Run on IDE
Output:
Time Complexity: O(nlogn)
