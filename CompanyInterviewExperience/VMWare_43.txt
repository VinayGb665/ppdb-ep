Write a function detectAndRemoveLoop() that checks whether a given Linked List contains loop and if loop is present then removes the loop and returns true. And if the list doesn’t contain loop then returns false. Below diagram shows a linked list with a loop. detectAndRemoveLoop() must change the below list to 1->2->3->4->5->NULL.

We also recommend to read following post as a prerequisite of the solution discussed here.

Write a C function to detect loop in a linked list
Before trying to remove the loop, we must detect it. Techniques discussed in the above post can be used to detect loop.  To remove loop, all we need to do is to get pointer to the last node of the loop.  For example, node with value 5 in the above diagram. Once we have pointer to the last node, we can make the next of this node as NULL and loop is gone.
We can easily use Hashing or Visited node techniques (discussed in the above mentioned post) to get the pointer to the last node.  Idea is simple: the very first node whose next is already visited (or hashed) is the last node.
We can also use Floyd Cycle Detection algorithm to detect and remove the loop. In the Floyd’s algo, the slow and fast pointers meet at a loop node.  We can use this loop node to remove cycle. There are following two different ways of removing loop when Floyd’s algorithm is used for Loop detection.
Method 1 (Check one by one)  
We know that Floyd’s Cycle detection algorithm terminates when fast and slow pointers meet at a common point.  We also know that this common point is one of the loop nodes (2 or 3 or 4 or 5 in the above diagram). We store the address of this in a pointer variable say ptr2.  Then we start from the head of the Linked List and check for nodes one by one if they are reachable from ptr2.  When we find a node that is reachable, we know that this node is the starting node of the loop in Linked List and we can get pointer to the previous of this node.
Run on IDE
Run on IDE
Run on IDE

Method 2 (Better Solution)
This method is also dependent on Floyd’s Cycle detection algorithm.
1)   Detect Loop using Floyd’s Cycle detection algo and get the pointer to a loop node.
2)   Count the number of nodes in loop. Let the count be k.
3)   Fix one pointer to the head and another to kth node from head.
4)   Move both pointers at the same pace, they will meet at loop starting node.
5)   Get pointer to the last node of loop and make next of it as NULL.
Thanks to WgpShashank for suggesting this method.
Run on IDE
Run on IDE
Run on IDE

Method 3 (Optimized Method 2: Without Counting Nodes in Loop)
We do not need to count number of nodes in Loop. After detecting the loop, if we start slow pointer from head and move both slow and fast pointers at same speed until fast don’t meet, they would meet at the beginning of the loop.
How does this work?
Let slow and fast meet at some point after Floyd’s Cycle finding algorithm.  Below diagram shows the situation when cycle is found.

We can conclude below from above diagram 
From above equation, we can conclude below 
So if we start moving both pointers again at same speed such that one pointer (say slow) begins from head node of linked list and other pointer (say fast) begins from meeting point.  When slow pointer reaches beginning of loop (has made m steps), fast pointer would have made also moved m steps as they are now moving same pace.  Since m+k is a multiple of n and fast starts from k, they would meet at the beginning.  Can they meet before also? No because slow pointer enters the cycle first time after m steps.
Run on IDE
Run on IDE
Run on IDE

Method 4 Hashing: Hash the address of the linked list nodes
We can hash the addresses of the linked list nodes in an unordered map and just check if the element already exists in the map. If it exists, we have reached a node which already exists by a cycle, hence we need to make the last node’s next pointer NULL.
Run on IDE
We Thank Shubham Agrawal for suggesting this solution.
Thanks to Gaurav Ahirwar for suggesting above solution.
Please write comments if you find the above codes/algorithms incorrect, or find other ways to solve the same problem.
