Given a number N, print all its unique prime factors and their powers in N.
Examples:
A Simple Solution is to first find prime factors of N. Then for every prime factor, find the highest power of it that divides N and print it.
An Efficient Solution is to use  Sieve of Eratosthenes.  
Below is the implementation of above steps.
Run on IDE
// Java Program to print prime
// factors and their powers using
// Sieve Of Eratosthenes
class GFG
{
// Using SieveOfEratosthenes
// to find smallest prime
// factor of all the numbers.
// For example, if N is 10,
// s[2] = s[4] = s[6] = s[10] = 2
// s[3] = s[9] = 3
// s[5] = 5
// s[7] = 7
static void sieveOfEratosthenes(int N,
                                int s[])
{
	// Create a boolean array
	// “prime[0..n]”  and initialize
	// all entries in it as false.
	boolean[] prime = new boolean[N + 1];
	// Initializing smallest
	// factor equal to 2
	// for all the even numbers
	for (int i = 2; i <= N; i += 2)
		s[i] = 2;

	// For odd numbers less 
	// then equal to n
	for (int i = 3; i <= N; i += 2)
	{
		if (prime[i] == false)
		{
			// s(i) for a prime is
			// the number itself
			s[i] = i;

			// For all multiples of 
			// current prime number
			for (int j = i; j * i <= N; j += 2)
			{
				if (prime[i * j] == false)
				{
					prime[i * j] = true;

					// i is the smallest prime 
					// factor for number "i*j".
					s[i * j] = i;
				}
			}
		}
	}
}

// Function to generate prime 
// factors and its power
static void generatePrimeFactors(int N)
{
	// s[i] is going to store 
	// smallest prime factor of i.
	int[] s = new int[N + 1];

	// Filling values in s[] using sieve
	sieveOfEratosthenes(N, s);

	System.out.println("Factor Power");

	int curr = s[N]; // Current prime factor of N
	int cnt = 1; // Power of current prime factor

	// Printing prime factors 
	// and their powers
	while (N > 1)
	{
		N /= s[N];
		// N is now N/s[N]. If new N
		// also has smallest prime
		// factor as curr, increment power
		if (curr == s[N])
		{
			cnt++;
			continue;
		}
		System.out.println(curr + “\t” + cnt);
		// Update current prime factor
		// as s[N] and initializing
		// count as 1.
		curr = s[N];
		cnt = 1;
	}
}
// Driver Code
public static void main(String[] args)
{
	int N = 360;
	generatePrimeFactors(N);
}
}
// This code is contributed by mits
Run on IDE
Output:
The above algorithm finds all powers in O(Log N) time after we have filled s[].  This can be very useful in competitive environment where we have an upper limit and we need to compute prime factors and their powers for many test cases.  In this scenario, the array needs to be s[] filled only once.
