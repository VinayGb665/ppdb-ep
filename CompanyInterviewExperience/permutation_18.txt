Given a word, find lexicographically smaller permutation of it.  For example, lexicographically smaller permutation of “4321” is “4312” and next smaller permutation of “4312” is “4231”. If the string is sorted in ascending order, the next lexicographically smaller permutation doesn’t exist.
We have discussed next_permutation() that modifies a string so that it stores lexicographically smaller permutation.
STL also provides std::prev_permutation. It returns ‘true’ if the function could rearrange the object as a lexicographically smaller permutation. Otherwise, it returns ‘false’.
Run on IDE
Output : 
How to write our own prev_permutation()?
Below are steps to find the previous permutation?
1. Find largest index i such that str[i – 1] > str[i].
2. Find largest index j such that j >= i and str[j] < str[i – 1].
3. Swap str[j] and str[i – 1].
4. Reverse the sub-array starting at str[i].
Below is C++ implementation of above steps.
Run on IDE
Output : 
