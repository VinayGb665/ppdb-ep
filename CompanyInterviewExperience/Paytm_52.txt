This is a famous interview question asked in Google, Paytm and many other company interviews. 
Below is the problem statement.
Examples:
Below are few important points to note.
a) For N < 7, the output is N itself. 
b) Ctrl V can be used multiple times to print current buffer (See last two examples above). The idea is to compute the optimal string length for N keystrokes by using a simple insight. The sequence of N keystrokes which produces an optimal string length will end with a suffix of Ctrl-A, a Ctrl-C, followed by only Ctrl-V’s . (For N > 6)
The task is to find out the break=point after which we get the above suffix of keystrokes. Definition of a breakpoint is that instance after which we need to only press Ctrl-A, Ctrl-C once and the only Ctrl-V’s afterwards to generate the optimal length. If we loop from N-3 to 1 and choose each of these values for the break-point, and compute that optimal string they would produce. Once the loop ends, we will have the maximum of the optimal lengths for various breakpoints, thereby giving us the optimal length for N keystrokes.
Below is implementation based on above idea.
Run on IDE
Run on IDE
Run on IDE
Output:
The above function computes the same subproblems again and again. Recomputations of same subproblems can be avoided by storing the solutions to subproblems and solving problems in bottom up manner. 
Below is Dynamic Programming based C implementation where an auxiliary array screen[N] is used to store result of subproblems.

Run on IDE
Run on IDE

Thanks to Gaurav Saxena for providing the above approach to solve this problem.
