Write a program that, given an array A[] of n numbers and another number x, determines whether or not there exist two elements in S whose sum is exactly x. 
METHOD 1 (Use Sorting)
Algorithm : 
Time Complexity: Depends on what sorting algorithm we use.  If we use Merge Sort or Heap Sort then (-)(nlogn) in worst case.  If we use Quick Sort then O(n^2) in worst case.
Auxiliary Space : Again, depends on sorting algorithm. For example auxiliary space is O(n) for merge sort and O(1) for Heap Sort.

Example :
Let Array be  {1, 4, 45, 6, 10, -8} and sum to find be 16
Sort the array
A = {-8, 1, 4, 6, 10, 45}
Initialize l = 0,  r = 5
A[l] + A[r] ( -8 + 45)  >  16    => decrement r.  Now r = 10
A[l] + A[r] ( -8 + 10)    increment l.  Now l = 1
A[l] + A[r] ( 1 + 10)     increment l.  Now l = 2
A[l] + A[r] ( 4 + 10)     increment l.  Now l = 3
A[l] + A[r] ( 6 + 10)  == 16    =>  Found candidates (return 1)
Note: If there are more than one pair having the given sum then this algorithm reports only one. Can be easily extended for this though.
Below is the implementation of the above approach.
Run on IDE
Run on IDE
Run on IDE
Run on IDE
Run on IDE
Run on IDE


METHOD 2 (Use Hashing)
This method works in O(n) time. 
Below is the implementation of the above approach :
Run on IDE
Run on IDE
Run on IDE
Run on IDE
Run on IDE
Output: 
Time Complexity:  O(n)
Auxiliary Space: O(n) where n is size of array.
If range of numbers include negative numbers then also it works. All we have to do for negative numbers is to make everything positive by adding the absolute value of smallest negative integer to all numbers.

Related Problems:
Given two unsorted arrays, find all pairs whose sum is x
Count pairs with given sumCount all distinct pairs with difference equal to k
Please write comments if you find any of the above codes/algorithms incorrect, or find other ways to solve the same problem.
