Given three numbers n, r and p, compute value of nCr mod p.

Example:


A Simple Solution is to first compute  nCr, then compute nCr % p.  This solution works fine when the value of nCr is small.  
What if the value of nCr is large?
The value of nCr%p is generally needed for large values of n when nCr cannot fit in a variable, and causes overflow.  So computing nCr  and then using modular operator is not a good idea as there will be overflow even for slightly larger values of n and r. For example the methods discussed here and here cause overflow for n = 50 and r = 40.
The idea is to compute nCr using below formula
Working of Above formula and Pascal Triangle:
Let us see how above formula works for C(4,3)
1==========>> n = 0, C(0,0) = 1
1–1========>> n = 1, C(1,0) = 1, C(1,1) = 1
1–2–1======>> n = 2, C(2,0) = 1, C(2,1) = 2, C(2,2) = 1
1–3–3–1====>> n = 3, C(3,0) = 1, C(3,1) = 3, C(3,2) = 3, C(3,3)=1
1–4–6–4–1==>> n = 4, C(4,0) = 1, C(4,1) = 4, C(4,2) = 6, C(4,3)=4, C(4,4)=1
So here every loop on i, builds i’th row of pascal triangle, using (i-1)th row
Extension of above formula for modular arithmetic:
We can use distributive property of modulor operator to find nCr % p using above formula.
The above formula can implemented using Dynamic Programming using a 2D array.
The 2D array based dynamic programming solution can be further optimized by constructing one row at a time.  See Space optimized version in below post for details.
Binomial Coefficient using Dynamic Programming
Below is implementation based on the space optimized version discussed in above post.

Run on IDE
Run on IDE
Run on IDE
Run on IDE
[

Run on IDE

Time complexity of above solution is O(n*r) and it requires O(n) space. There are more and better solutions to above problem. 
Compute nCr % p | Set 2 (Lucas Theorem)
