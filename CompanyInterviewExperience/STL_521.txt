We have discussed some tricks in below post. In this post, some more tricks are discussed.
Writing C/C++ code efficiently in Competitive programming
Although practice is the only way that ensures increased performance in programming contests but having some tricks up your sleeve ensures an upper edge and fast debugging.
1) Checking if the number is even or odd without using the % operator:
Although this trick is not much better than using % operator but is sometimes efficient (with large numbers). Use & operator:
Run on IDE
Example:
num = 5
Binary: “101 & 1” will be 001, so true
num = 4
Binary: “100 & 1” will be 000, so false.
2)  Fast Multiplication or Division by 2
Multiplying by 2 means shifting all the bits to left and dividing by 2 means shifting to the right.
Example : 2 (Binary 10): shifting left 4 (Binary 100) and right 1 (Binary 1)
Run on IDE
3) Swapping of 2 numbers using XOR: 
This method is fast and doesn’t  require the use of 3rd variable.
Run on IDE
 4) Avoiding use of strlen(): 
Run on IDE
5) Use of emplace_back() (Discussed here, here and here)
Instead of push_back() in STL emplace_back can be used because it is much faster and instead of allocating memory somewhere else and then appending it directly allocates  memory in the container.
6)  Inbuilt GCD function: C++ has inbuilt GCD function and there is no need to explicitly code it.     Syntax:  __gcd(x, y);
7) Using Inline functions: We can create inline functions and use them without having to code them up during the contest. Examples: (a) function for sieve, (b) function for palindrome.
8)  Maximum size of the array: We must be knowing that the maximum size of array declared inside the main function is of the order of 10^6 but if you declare array globally then you can declare its size upto 10^7.
9)  Calculating the most significant digit:  To calculate the most significant digit of any number log can be directly used to calculate it. 
10)  Calculating the number of digits directly:  To calculate number of digits in a number, instead of looping you can efficiently use log : 
11)  Efficient trick to know if a number is a power of 2  sing the normal technique of division the complexity comes out to be O(logN), but it can be solved using O(v) where v are the number of digits of number in binary form.
Run on IDE
12) C++11 has in built algorithms for following:
Please refer Array algorithms in C++ STL (all_of, any_of, none_of, copy_n and itoa) for details.
13) Copy Algorithm: used to copy elements from one container to another.
Please refer Array algorithms in C++ STL (all_of, any_of, none_of, copy_n and itoa) for details.
14) The Iota Algorithm The algorithm iota() creates a range of sequentially increasing values, as if by assigning an initial value to *first, then incrementing that value using prefix ++. In the following listing, iota() assigns the consecutive values {10, 11, 12, 13, 14} to the array arr, and {‘a’, ‘b’, ‘c’} to the char array c[].
Run on IDE
Please refer Array algorithms in C++ STL (all_of, any_of, none_of, copy_n and itoa) for details.
15) Initialization in Binary form: In C++ 11 assignments can also be made in binary form.
Run on IDE
Output : 
 16) Use of “and”   Though not a very productive one, this tip helps you to just use conditional operator and instead of typing &.
Run on IDE
Output : 
