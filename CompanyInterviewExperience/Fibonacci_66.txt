Given a positive integer N, count all possible distinct binary strings of length N such that there are no consecutive 1’s.
Examples:
This problem can be solved using Dynamic Programming. Let a[i] be the number of binary strings of length i which do not contain any two consecutive 1’s and which end in 0. Similarly, let b[i] be the number of such strings which end in 1. We can append either 0 or 1 to a string ending in 0, but we can only append 0 to a string ending in 1. This yields the recurrence relation: 
The base cases of above recurrence are a[1] = b[1] = 1. The total number of strings of length i is just a[i] + b[i].
Following is the implementation of above solution. In the following implementation, indexes start from 0. So a[i] represents the number of binary strings  for input length i+1. Similarly, b[i] represents binary strings for input length i+1.
Run on IDE
Run on IDE
Run on IDE
Run on IDE
Run on IDE

Source:
courses.csail.mit.edu/6.006/oldquizzes/solutions/q2-f2009-sol.pdf
If we take a closer look at the pattern, we can observe that the count is actually (n+2)’th Fibonacci number for n >= 1.  The Fibonacci Numbers are 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 141, ….
Therefore we can count the strings in O(Log n) time also using the method 5 here.
Related Post : 
1 to n bit numbers with no consecutive 1s in binary representation.
