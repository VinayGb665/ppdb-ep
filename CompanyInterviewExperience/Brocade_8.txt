Write an efficient program to count number of 1s in binary representation of an integer.
Examples :

1. Simple Method Loop through all bits in an integer, check if a bit is set and if it is then increment the set bit count.  See below program.

Run on IDE
Run on IDE
Run on IDE
Run on IDE
Run on IDE

Time Complexity:  (-)(logn) (Theta of logn)
Recursive Approach :

Run on IDE
Run on IDE
Run on IDE
Run on IDE
Run on IDE

2. Brian Kernighan’s Algorithm:
Subtraction of 1 from a number toggles all the bits (from right to left) till the rightmost set bit(including the rightmost set bit).  So if we subtract a number by 1 and do bitwise & with itself (n & (n-1)), we unset the rightmost set bit.  If we do n & (n-1) in a loop and count the no of times loop executes we get the set bit count.
The beauty of this solution is the number of times it loops is equal to the number of set bits in a given integer.
Implementation of Brian Kernighan’s Algorithm:

Run on IDE
Run on IDE
Run on IDE
Run on IDE
Run on IDE

Example for Brian Kernighan’s Algorithm: 
Time Complexity:  O(logn)
Recursive Approach :

Run on IDE
Run on IDE
Run on IDE
Run on IDE
Run on IDE

3. Using Lookup table:   We can count bits in O(1) time using lookup table. Please see http://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetTable for details.
We can find one use of counting set bits at Count number of bits to be flipped to convert A to B
Note: In GCC, we can directly count set bits using __builtin_popcount(). So we can avoid a separate function for counting set bits.

Run on IDE
Run on IDE


Count set bits in an integer Using Lookup Table
References:
http://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetNaive
