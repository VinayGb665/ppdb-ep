Given a sorted array of positive integers, rearrange the array alternately i.e first element should be the maximum value, second minimum value, third-second max, fourth-second min and so on. 
Examples:
We have discussed a solution in below post:
Rearrange an array in maximum minimum form | Set 1 : The solution discussed here requires extra space, how to solve this problem with O(1) extra space.
In this post a solution that requires O(n) time and O(1) extra space is discussed. The idea is to use multiplication and modular trick to store two elements at an index. 
How does expression “arr[i] += arr[max_index] % max_element * max_element”  work ?
The purpose of this expression is to store two elements at index arr[i].  arr[max_index] is stored as multiplier and “arr[i]” is stored as remainder. For example in {1 2 3 4 5 6 7 8 9}, max_element is 10 and we store 91 at index 0. With 91, we can get original element as 91%10 and new element as 91/10.
Below implementation of above idea

Run on IDE
Run on IDE
Run on IDE
Run on IDE

Thanks Saurabh Srivastava and Gaurav Ahirwar for suggesting this approach. 
Another Approach:  A simpler approach will be to observe indexing positioning of maximum elements and minimum elements. The even index stores maximum elements and the odd index stores the minimum elements. With every increasing index, the maximum element decreases by one and the minimum element increases by one. A simple traversal can be done and arr[] can be filled in again. 
Below is the implementation of the above approach: 
Run on IDE
Run on IDE
Run on IDE

Thanks Apollo Doley for suggesting this approach. 
