Given a number n, count all distinct divisors of it.
Examples:

A Naive Solution would be to iterate all the numbers from 1 to sqrt(n), checking if that number divides n and incrementing number of divisors. This approach takes O(sqrt(n)) time.

Run on IDE
Run on IDE
Run on IDE
Run on IDE
Run on IDE

Optimized Solution (O(n^1/3))
Note that, we have only these three cases for calculating factors of y since there can be at max two prime factors of y. If it would have had more than two prime factors, one of them would surely have been less than equal to n(1/3), and hence it would be included in x and not in y.
Run on IDE
Run on IDE
Run on IDE
 $n)
			break;
		// Calculating power of a[i] in n.
		$cnt = 1; // cnt is power of
		          // prime a[i] in n.
		while ($n % $a[$i] == 0) // if a[i] is a
		                         // factor of n
		{
			$n = $n / $a[$i];
			$cnt = $cnt + 1; // incrementing power
		}
		// Calculating number of divisors
		// If n = a^p * b^q then total
		// divisors of n are (p+1)*(q+1)
		$ans = $ans * $cnt;
	}
	// if a[i] is greater than
	// cube root of n
	// First case
	if ($prime[$n])
		$ans = $ans * 2;
	// Second case
	else if ($primesquare[$n])
		$ans = $ans * 3;
	// Third casse
	else if ($n != 1)
		$ans = $ans * 4;
	return $ans; // Total divisors
}
// Driver Code
echo “Total distinct divisors of 100 are : “.
		            countDivisors(100). “\n”;
// This code is contributed
// by ChitraNayal
?>

Time Complexity: O(n1/3)
