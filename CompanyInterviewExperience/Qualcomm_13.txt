Write a function detectAndCountLoop() that checks whether a given Linked List contains loop and if loop is present then returns count of nodes in loop.  For example, loop is present in below linked list and length of loop is 4. If loop is not present, then function should return 0.

We know that Floydâ€™s Cycle detection algorithm terminates when fast and slow pointers meet at a common point.  We also know that this common point is one of the loop nodes (2 or 3 or 4 or 5 in the above diagram). We store the address of this in a pointer variable say ptr2.  Then we start from the head of the Linked List and check for nodes one by one if they are reachable from ptr2.  When we find a node that is reachable, we know that this node is the starting node of the loop in Linked List and we can get pointer to the previous of this node.
Run on IDE
Output : 
Related Articles : 
Detect loop in a linked list
Detect and Remove Loop in a Linked List
