Given a set of time intervals in any order, merge all overlapping intervals into one and output the result which should have only mutually exclusive intervals. Let the intervals  be represented as pairs of integers for simplicity. 
For example, let the given set of intervals be  {{1,3}, {2,4}, {5,7}, {6,8} }. The intervals {1,3} and {2,4} overlap with each other, so they should be merged and become {1, 4}. Similarly {5, 7} and {6, 8} should be merged and become {5, 8}
Write a function which produces the set of merged intervals for the given set of intervals. 
A simple approach is to start from the first interval and compare it with all other intervals for overlapping, if it overlaps with any other interval, then remove the other interval from list and merge the other into the first interval. Repeat the same steps for remaining intervals after first. This approach cannot be implemented in better than O(n^2) time.
An efficient approach is to first sort the intervals according to starting time.  Once we have the sorted intervals, we can combine all intervals in a linear traversal.  The idea is, in sorted array of intervals, if interval[i] doesnâ€™t overlap with interval[i-1], then interval[i+1] cannot overlap with interval[i-1] because starting time of interval[i+1] must be greater than or equal to interval[i]. Following is the detailed step by step algorithm.
Below is a C++ implementation of the above approach.
Run on IDE
Output: 
Time complexity of the method is O(nLogn) which is for sorting.  Once the array of intervals is sorted, merging takes linear time.
A  O(n Log n) and O(1) Extra Space Solution
The above solution requires O(n) extra space for stack.  We can avoid use of extra space by doing merge operations in-place. Below are detailed steps.  
Note that if intervals are sorted by decreasing order of start times, we can quickly check if intervals overlap or not by comparing start time of previous interval with end time of current interval.
Below is C++ implementation of above algorithm.
Run on IDE
Output: 
Thanks to Gaurav Ahirwar for suggesting this method. 

