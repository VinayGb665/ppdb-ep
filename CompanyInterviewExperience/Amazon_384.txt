Given an array of integers, find length of the largest subarray with sum equals to 0.
Examples :
A simple solution is to consider all subarrays one by one and check the sum of every subarray. We can run two loops: the outer loop picks a starting point i and the inner loop tries all subarrays starting from i. Time complexity of this method is O(n2).
Below are implementations of this solution.
Run on IDE
Run on IDE
Run on IDE
Run on IDE
Run on IDE
Output :
We can  Use Hashing to solve this problem  in O(n)  time.  The idea is to iterate through the array and for every element arr[i], calculate sum of elements form 0 to i (this can simply be done as sum += arr[i]).  If the current sum has been seen before, then there is a zero sum array.   Hashing is used to store the sum values, so that we can quickly store sum and find out whether the current sum is seen before or not.
Following are implementations of the above approach.
Run on IDE
Run on IDE
Run on IDE
Output :
Time Complexity of this solution can be considered as O(n) under the assumption that we have good hashing function that allows insertion and retrieval operations in O(1) time.
