Given a linked list which is sorted based on absolute values. Sort the list based on actual values.
Examples: 
Source : Amazon Interview
A simple solution is to traverse the linked list from beginning to end.  For every visited node, check if it is out of order.  If it is, remove it from its current position and insert at correct position. This is implementation of insertion sort for linked list and time complexity of this solution is O(n*n).
A better solution is to sort the linked list using merge sort.  Time complexity of this solution is O(n Log n).
An efficient solution can work in O(n) time.  An important observation is, all negative elements are present in reverse order.  So we traverse the list, whenever we find an element that is out of order, we move it to the front of linked list.  
Below is C++ implementation of above idea.

Run on IDE
Run on IDE

