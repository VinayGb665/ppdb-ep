Given a sorted array in which all elements appear twice (one after one) and one element appears only once. Find that element in O(log n) complexity.
Example: 
A Simple Solution is to traverse the array from left to right.  Since the array is sorted, we can easily figure out the required element.
An Efficient Solution can find the required element in O(Log n) time.  The idea is to use Binary Search.  Below is an observation in input array.
All elements before the required have first occurrence at even index (0, 2, ..) and next occurrence at odd index (1, 3, …).  And all elements after the required element have first occurrence at odd index and next occurrence at even index.  
1) Find the middle index, say ‘mid’.
2) If ‘mid’ is even, then compare arr[mid] and arr[mid + 1].  If both are same, then the required element after ‘mid’ else before mid.
3) If ‘mid’ is odd, then compare arr[mid] and arr[mid – 1].  If both are same, then the required element after ‘mid’ else before mid.
Below is the implementation based on above idea.

Run on IDE
Run on IDE
Run on IDE
Run on IDE
Run on IDE

Time Complexity: O(Log n)
