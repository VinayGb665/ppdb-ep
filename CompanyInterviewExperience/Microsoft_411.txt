A binary search tree (BST) is a node based binary tree data structure which has the following properties.
• The left subtree of a node contains only nodes with keys less than the node’s key.
• The right subtree of a node contains only nodes with keys greater than the node’s key.
• Both the left and right subtrees must also be binary search trees.
From the above properties it naturally follows that:
• Each node (item in the tree) has a distinct key.

METHOD 1 (Simple but Wrong)
Following is a simple program. For each node, check if left node of it is smaller than the node and right node of it is greater than the node.
Run on IDE
This approach is wrong as this will return true for below binary tree (and below tree is not a BST because 4 is in left subtree of 3)

 


METHOD 2 (Correct but not efficient)
For each node, check if max value in left subtree is smaller than the node and min value in right subtree greater than the node.
Run on IDE
It is assumed that you have helper functions minValue() and maxValue() that return the min or max int value from a non-empty tree

METHOD 3 (Correct and Efficient)
Method 2 above runs slowly since it traverses over some parts of the tree many times. A better solution looks at each node only once. The trick is to write a utility helper function isBSTUtil(struct node* node, int min, int max) that traverses down the tree keeping track of the narrowing min and max allowed values as it goes, looking at each node only once. The initial values for min and max should be INT_MIN and INT_MAX — they narrow from there. 
Implementation:

Run on IDE
Run on IDE
Run on IDE

 
Simplified Method 3
We can simplify method 2 using NULL pointers instead of INT_MIN and INT_MAX values.
Run on IDE
Output : 
Thanks to Abhinesh Garhwal for suggesting above solution.
METHOD 4(Using In-Order Traversal)
Thanks to LJW489 for suggesting this method.
1) Do In-Order Traversal of the given tree and store the result in a temp array.
3) Check if the temp array is sorted in ascending order, if it is, then the tree is BST.
Time Complexity: O(n)
We can avoid the use of Auxiliary Array.  While doing In-Order traversal, we can keep track of previously visited node.  If the value of the currently visited node is less than the previous value, then tree is not BST.  Thanks to ygos for this space optimization.
Run on IDE
Run on IDE
Run on IDE
The use of static variable can also be avoided by using reference to prev node as a parameter.
Run on IDE

Sources:
http://en.wikipedia.org/wiki/Binary_search_tree
http://cslibrary.stanford.edu/110/BinaryTrees.html
Please write comments if you find any bug in the above programs/algorithms or other ways to solve the same problem. 
