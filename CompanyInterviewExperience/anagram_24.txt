Given an array of strings, find all anagram pairs in the given array.
Example:
We can find whether two strings are anagram or not in linear time using count array (see method 2 of this). 
One simple idea to find whether all anagram pairs is to run two nested loops. The outer loop picks all strings one by one. The inner loop checks whether remaining strings are anagram of the string picked by outer loop.
Below is the implementation of this approach :

Run on IDE
Run on IDE
Run on IDE

The time complexity of the above solution is O(n2*m) where n is number of strings and m is maximum length of a string.
Optimizations:
We can optimize the above solution using following approaches.
1) Using sorting: We can sort array of strings so that all anagrams come together.  Then print all anagrams by linearly traversing the sorted array.  The time complexity of this solution is O(mnLogn) (We would be doing O(nLogn) comparisons in sorting and a comparison would take O(m) time)
2) Using Hashing: We can build a hash function like XOR or sum of ASCII values of all characters for a string.  Using such a hash function, we can build a hash table. While building the hash table, we can check if a value is already hashed. If yes, we can call areAnagrams() to check if two strings are actually anagrams (Note that xor or sum of ASCII values is not sufficient, see Kaushik Leleâ€™s comment here)
