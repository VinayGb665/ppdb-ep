Given a string with repeated characters, task is rearrange characters in a string so that no two adjacent characters are same.
Note : It may be assumed that the string has only lowercase English alphabets.
Examples:
Asked In : Amazon Interview

Prerequisite :  priority_queue.
The idea is to put highest frequency character first (a greedy approach).  We use a priority queue (Or Binary Max Heap) and put all characters and ordered by their frequencies (highest frequency character at root).  We one by one take highest frequency character from the heap and add it to result.  After we add, we decrease frequency of the character and we temporarily move this character out of priority queue so that it is not picked next time.
We have to follow the step to solve this problem, they are:
1. Build a Priority_queue or max_heap, pq that stores characters and their frequencies.
 …… Priority_queue or max_heap is built on the bases of frequency of character.
2. Create a temporary Key that will used as the previous visited element ( previous element in resultant string. Initialize it { char = ‘#’ , freq = ‘-1’ }
3. While pq is not empty.
 ….. Pop an element and add it to result.
 ….. Decrease frequency of the popped element by ‘1’
 ….. Push the previous element back into the priority_queue if it’s frequency > ‘0’
 ….. Make the current element  as previous element for the next iteration.
4. If length of resultant string and original, print “not possible”. Else print result.
Below c++ implementation of above idea          
Run on IDE
Output:
Time complexity : O(n log n)
