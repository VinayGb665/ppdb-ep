A sorted array is rotated at some unknown point, find the minimum element in it.   
Following solution assumes that all elements are distinct.
Examples: 
A simple solution is to traverse the complete array and find minimum.  This solution requires ?(n) time.
We can do it in O(Logn) using Binary Search. If we take a closer look at above examples, we can easily figure out following pattern:
We strongly recommend you to try it yourself before seeing the following implementation.
Run on IDE
Run on IDE
Run on IDE
Run on IDE
Run on IDE

How to handle duplicates?
It turned out that duplicates can’t be handled in O(Logn) time in all cases.  Thanks to Amit Jain for inputs.  The special cases that cause problems are like {2, 2, 2, 2, 2, 2, 2, 2, 0, 1, 1, 2} and {2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2}.  It doesn’t look possible to go to left half or right half by doing constant number of comparisons at the middle. So the problem with repetition can be solved in O(n) worst case.
