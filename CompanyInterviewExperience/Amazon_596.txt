Given an n x n matrix, where every row and column is sorted in non-decreasing order.  Find the kth smallest element in the given 2D array.
For example, consider the following 2D array. 
The idea is to use min heap.  Following are detailed step.
1) Build a min heap of elements from first row. A heap entry also stores row number and column number.
2) Do following k times.
…a) Get minimum element (or root) from min heap.
…b) Find row number and column number of the minimum element.
…c) Replace root with the next element from same column and min-heapify the root.
3) Return the last extracted root.
Following is C++ implementation of above algorithm.
Run on IDE
Output: 
Time Complexity: The above solution involves following steps.
1) Build a min heap which takes O(n) time
2) Heapify k times which takes O(kLogn) time.
Therefore, overall time complexity is O(n + kLogn) time. 
The above code can be optimized to build a heap of size k when k is smaller than n. In that case, the kth smallest element must be in first k rows and k columns. 
We will soon be publishing more efficient algorithms for finding the kth smallest element. 
