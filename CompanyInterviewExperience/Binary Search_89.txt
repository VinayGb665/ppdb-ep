Binary search is an important component in competitive programming or any algorithmic competition, having knowledge of shorthand functions reduces the time to code them. This searching only works when container is sorted. Related functions are discussed below.
1.binary_search(start_ptr, end_ptr, num) : This function returns boolean true if the element is present in the container, else returns false.
Run on IDE
Output:

2. lower_bound(start_ptr, end_ptr, num)  : Returns pointer to “position of num” if container contains 1 occurrence of num. Returns pointer to “first position of num” if container contains multiple occurrence of num. Returns pointer to “position of next higher number than num” if container does not contain occurrence of num.  Subtracting the pointer to 1st position i.e “vect.begin()” returns the actual index.
Run on IDE
Output:

3. upper_bound(start_ptr, end_ptr, num)  : Returns pointer to “position of next higher number than num” if container contains 1 occurrence of num. Returns pointer to “first position of next higher number than last occurrence of num” if container contains multiple occurrence of num. Returns pointer to “position of next higher number than num” if container does not contain occurrence of num. Subtracting the pointer to 1st position i.e “vect.begin()” returns the actual index.
Run on IDE
Output:

