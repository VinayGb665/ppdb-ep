The name of this searching algorithm may be misleading as it works in O(Log n) time. The name comes from the way it searches an element.
We have discussed, linear search, binary search for this problem.
Exponential search involves two steps:
How to find the range where element may be present?
The idea is to start with subarray size 1, compare its last element with x, then try size 2, then 4 and so on until last element of a subarray is not greater.
Once we find an index i (after repeated doubling of i), we know that the element must be present between i/2 and i (Why i/2? because we could not find a greater value in previous iteration)
Given below are the implementations of above steps.
Run on IDE
Run on IDE
Run on IDE
Run on IDE
Run on IDE

Time Complexity : O(Log n)
Auxiliary Space : The above implementation of Binary Search is recursive and requires O(Log n) space. With iterative Binary Search, we need only O(1) space.
Applications of Exponential Search:
Reference:
https://en.wikipedia.org/wiki/Exponential_search
