Given a binary tree containing n nodes. The problem is to count subtress having total node’s data sum equal to a given value x.
Examples:
Source: Microsoft Interview Experience | Set 157.

Algorithm:
Run on IDE
// Java program to find if
// there is a subtree with
// given sum
import java.util.*;
class GFG
{
// structure of a node
// of binary tree
static class Node
{
	int data;
	Node left, right;
}
static class INT
{
	int v;
	INT(int a)
	{
		v = a;
	}
}
// function to get a new node
static Node getNode(int data)
{
	// allocate space
	Node newNode = new Node(); 
	// put in the data
	newNode.data = data;
	newNode.left = newNode.right = null;
	return newNode;
} 
// function to count subtress that
// sum up to a given value x
static int countSubtreesWithSumX(Node root,
						  INT count, int x)
{
	// if tree is empty
	if (root == null)
		return 0; 
	// sum of nodes in the left subtree
	int ls = countSubtreesWithSumX(root.left,
	                               count, x); 
	// sum of nodes in the right subtree
	int rs = countSubtreesWithSumX(root.right,
	                               count, x); 
	// sum of nodes in the subtree
	// rooted with ‘root.data’
	int sum = ls + rs + root.data; 
	// if true
	if (sum == x)
		count.v++; 
	// return subtree’s nodes sum
	return sum;
} 
// utility function to
// count subtress that
// sum up to a given value x
static int countSubtreesWithSumXUtil(Node root,
                                     int x)
{
	// if tree is empty
	if (root == null)
		return 0; 
	INT count = new INT(0); 
	// sum of nodes in the left subtree
	int ls = countSubtreesWithSumX(root.left,
	                               count, x); 
	// sum of nodes in the right subtree
	int rs = countSubtreesWithSumX(root.right,
	                               count, x); 
	// if tree’s nodes sum == x
	if ((ls + rs + root.data) == x)
		count.v++; 
	// required count of subtrees
	return count.v;
} 
// Driver Code
public static void main(String args[])
{
	/* binary tree creation
				5
			/ \
		-10	 3
		/ \ / \
		9 8 -4 7
	*/
	Node root = getNode(5);
	root.left = getNode(-10);
	root.right = getNode(3);
	root.left.left = getNode(9);
	root.left.right = getNode(8);
	root.right.left = getNode(-4);
	root.right.right = getNode(7); 
	int x = 7; 
	System.out.println(“Count = ” +
	       countSubtreesWithSumXUtil(root, x));
}
}
// This code is contributed
// by Arnab Kundu

Time Complexity: O(n).
