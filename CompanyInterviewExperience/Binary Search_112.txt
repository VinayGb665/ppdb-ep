Arrays.binarySearch() is the simplest and most efficient method to find an element in a sorted array in Java
Declaration:
where data_type can be any of the primitive data types: byte, char, double, int, float, short, long and Object as well.
Description:
Searches the specified array of the given data type for the specified value using the binary search algorithm. The array must be sorted (as by the Arrays.sort() method) prior to making this call. If it is not sorted, the results are undefined. If the array contains multiple elements with the specified value, there is no guarantee which one will be found.
Parameters:
    arr – the array to be searched
    key – the value to be searched for
Returns:
index of the search key, if it is contained in the array; otherwise, (-(insertion point) – 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element greater than the key, or a.length if all elements in the array are less than the specified key. Note that this guarantees that the return value will be >= 0 if and only if the key is found.
Examples:
Run on IDE
Output:
Important Points:
Arrays.binarysearch() vs Collections.binarysearch()
Arrays.binarysearch() works for arrays which can be of primitive data type also. Collections.binarysearch() works for objects Collections like ArrayList and LinkedList. 
There are variants of this method in which we can also specify the range of array to search in. We will be discussing that as well as searching in an Object array in further posts.
