Given two arrays: arr1[0..m-1] and arr2[0..n-1]. Find whether arr2[] is a subset of arr1[] or not. Both the arrays are not in sorted order. It may be assumed that elements in both array are distinct.
Examples:
Input: arr1[] = {11, 1, 13, 21, 3, 7},  arr2[] = {11, 3, 7, 1}
Output: arr2[] is a subset of arr1[]
Input: arr1[] = {1, 2, 3, 4, 5, 6},  arr2[] = {1, 2, 4}
Output: arr2[] is a subset of arr1[]
Input: arr1[] = {10, 5, 2, 23, 19},  arr2[] = {19, 5, 3}
Output: arr2[] is not a subset of arr1[]
Method 1 (Simple)
Use two loops: The outer loop picks all the elements of arr2[] one by one. The inner loop linearly searches for the element picked by outer loop. If all elements are found then return 1, else return 0.
Run on IDE
Run on IDE
Run on IDE
Run on IDE

Time Complexity: O(m*n)
Method 2 (Use Sorting and Binary Search)
Run on IDE
Run on IDE

Method 3 (Use Sorting and Merging )
1) Sort both arrays: arr1[] and arr2[]  O(mLogm + nLogn)
2) Use Merge type of process to see if all elements of sorted arr2[] are present in sorted arr1[].
Thanks to Parthsarthi for suggesting this method.

Run on IDE
Run on IDE
Run on IDE
Run on IDE

Time Complexity: O(mLogm + nLogn) which is better than method 2. Please note that this will be the complexity if an nLogn algorithm is used for sorting both arrays which is not the case in above code. In above code Quick Sort is sued and worst case time complexity of Quick Sort is O(n^2)

Method 4 (Use Hashing)
1) Create a Hash Table for all the elements of arr1[].
2) Traverse arr2[] and search for each element of arr2[] in the Hash Table.  If element is not found then return 0.
3) If all elements are found then return 1.
Run on IDE
Note that method 1, method 2 and method 4 donâ€™t handle the cases when we have duplicates in arr2[].  For example, {1, 4, 4, 2} is not a subset of {1, 4, 2}, but these methods will print it as a subset. 
Please write comments if you find the above codes/algorithms incorrect, or find other ways to solve the same problem.
