Given a a Binary Tree, find the difference between the sum of nodes at odd level and the sum of nodes at even level.  Consider root as level 1, left and right children of root as level 2 and so on.  
For example, in the following tree, sum of nodes at odd level is (5 + 1 + 4 + 8) which is 18.  And sum of nodes at even level is (2 + 6 + 3 + 7 + 9) which is 27.  The output for following tree should be 18 – 27 which is -9.
A straightforward method is to use level order traversal.  In the traversal, check level of current node, if it is odd, increment odd sum by data of current node, otherwise increment even sum. Finally return difference between odd sum and even sum.  See following for implementation of this approach.
C implementation of level order traversal based approach to find the difference.
This approach is provided by Mandeep Singh. For Iterative approach, simply traverse the tree level by level (level order traversal), store sum of node values in even no. level in evenSum and rest in variable oddSum and finally return the difference.
Below is the simple implementation of the approach.

Run on IDE
The problem can also be solved using simple recursive traversal.  We can recursively calculate the required difference as, value of root’s data subtracted by the difference for subtree under left child and the difference for subtree under right child. 
Below is the implementation of this approach.
Run on IDE
Run on IDE
Run on IDE

Time complexity of both methods is O(n), but the second method is simple and easy to implement.
