Given a string, recursively remove adjacent duplicate characters from string. The output string should not have any adjacent duplicates.  See following examples.
A simple approach would be to run the input string through multiple passes.  In every pass remove all adjacent duplicates from left to right.  Stop running passes when there are no duplicates.  The worst time complexity of this method would be O(n^2).  
Run on IDE
Output: 
We can remove all duplicates in O(n) time.  
1) Start from the leftmost character and remove duplicates at left corner if there are any.
2) The first character must be different from its adjacent now.  Recur for string of length n-1 (string without first character).
3)  Let the string obtained after reducing right substring of length n-1 be rem_str. There are three possible cases
……..a) If first character of rem_str matches with the first character of original string, remove the first character from rem_str.
……..b)  Else if the last removed character in recursive calls is same as the first character of the original string. Ignore the first character of original string and return  rem_str.
……..c) Else, append the first character of the original string at the beginning of rem_str.
4) Return rem_str.
Following are C++ and Python implementations of the above algorithm.
Run on IDE
Run on IDE

Time Complexity: The time complexity of the solution can be written as T(n) = T(n-k) + O(k) where n is length of the input string and k is the number of first characters which are same.  Solution of the recurrence is O(n)
