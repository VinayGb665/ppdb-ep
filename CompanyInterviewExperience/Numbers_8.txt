Given an array of size N and Q queries, each query consists of L, R, and K(consider 1 based-indexing for L and R). The task is to find an element for each query that occurs consecutively in the subarray [L, R] more than or equal to K times. K will always be greater than floor((R-L+1)/2). If no such element exists, print -1.
Examples:

Input: arr[] = [1, 3, 3, 3, 4]
       Q = 1
       L = 1, R = 5, K = 3
Output: 3
The element 3 occurs 3 times consecutively in the range [1, 5]
Input: arr[] = [3, 2, 1, 1, 2, 2, 2, 2]
       Q = 2
       L = 2, R = 6, K = 3
       L = 3, R = 8, K = 4
Output:
-1
2
Approach: Create two auxiliary arrays left and right of size n. The Left array will store the count of elements from the start that occurs consecutively in the array. The Right array will store count of elements from back that occurs consecutively in the array. Since it is given in the question that k will always be greater than floor((R-L+1)/2). Hence if any such element exists in the given range, it is always lie in the index mid. Mathematically, min{ right[mid] + mid – 1, r – 1 }-max{ mid – left[mid] + 1, l – 1} + 1 will give the range of the element in the subarray L-R which lies at the index mid. If the range exceeds or is equal to k, then return the a[mid] element. If it is not then return -1. 
Below is the implementation of above approach :
Run on IDE
Time complexity:  O(N) to pre-compute the left andd right array and O(1) to answer every query.
Auxiliary Space: O(N)
