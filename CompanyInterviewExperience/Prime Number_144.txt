Given a number n, print all primes smaller than or equal to n. It is also given that n is a small number. 
Example:

The sieve of Eratosthenes is one of the most efficient ways to find all primes smaller than n when n is smaller than 10 million or so (Ref Wiki).
Following is the algorithm to find all the prime numbers less than or equal to a given integer n by Eratosthenes’ method:
When the algorithm terminates, all the numbers in the list that are not marked are prime.

Explanation with Example:
Let us take an example when n = 50.  So we need to print all print numbers smaller than or equal to 50. 
We create a list of all numbers from 2 to 50.

According to the algorithm we will mark all the numbers which are divisible by 2.

Now we move to our next unmarked number 3 and mark all the numbers which are multiples of 3.

We move to our next unmarked number 5 and mark all multiples of 5.

We continue this process and our final table will look like below:

So the prime numbers are the unmarked ones: 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47.
Thanks to Krishan Kumar for providing above explanation.

Implementation:
Following is the implementation of the above algorithm. In the following implementation,  a boolean array arr[] of size n is used to mark multiples of prime numbers.

Run on IDE
Run on IDE
Run on IDE
Run on IDE
Run on IDE

Time complexity : O(sqrt(n)loglog(n))
You may also like to see :
Segmented Sieve.
Sieve of Eratosthenes in 0(n) time complexity
References:
http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes
