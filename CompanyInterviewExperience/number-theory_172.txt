Given two integers ‘a’ and ‘m’, find modular multiplicative inverse of ‘a’ under modulo ‘m’.
The modular multiplicative inverse is an integer ‘x’ such that. 
The value of x should be in {0, 1, 2, … m-1}, i.e., in the ring of integer modulo m.
The multiplicative inverse of “a modulo m” exists if and only if a and m are relatively prime (i.e., if gcd(a, m) = 1).
Examples: 
Method 1 (Naive)
A Naive method is to try all numbers from 1 to m.  For every number x, check if (a*x)%m is 1.  Below is C++ implementation of this method.

Run on IDE
Run on IDE
Run on IDE
Run on IDE
Run on IDE

Time Complexity of this method is O(m).
Method 2 (Works when m and a are coprime)
The idea is to use Extended Euclidean algorithms that takes two integers ‘a’ and ‘b’, finds their gcd and also find ‘x’ and ‘y’ such that 
To find multiplicative inverse of ‘a’ under ‘m’, we put b = m in above formula. Since we know that a and m are relatively prime, we can put value of gcd as 1.
If we take modulo m on both sides, we get
We can remove the second term on left side as ‘my (mod m)’ would always be 0 for an integer y. 
So the ‘x’ that we can find using Extended Euclid Algorithm is multiplicative inverse of ‘a’
Below is C++ implementation of above algorithm.
Run on IDE
Output: 
Iterative Implementation:

Run on IDE
Run on IDE
Run on IDE
Run on IDE
Run on IDE

Time Complexity of this method is O(Log m)
 
Method 3 (Works when m is prime)
If we know m is prime, then we can also use Fermats’s little theorem to find the inverse.  
If we multiply both sides with a-1, we get
Below is the implementation of above idea.

Run on IDE
Run on IDE
Run on IDE
Run on IDE
Run on IDE
Output : 
Time Complexity of this method is O(Log m)
We have discussed three methods to find multiplicative inverse modulo m.
1) Naive Method, O(m)
2) Extended Euler’s GCD algorithm, O(Log m) [Works when a and m are coprime]
3) Fermat’s Little theorem, O(Log m) [Works when ‘m’ is prime]
Applications:
Computation of the modular multiplicative inverse is an essential step in RSA public-key encryption method.
References:
https://en.wikipedia.org/wiki/Modular_multiplicative_inverse
http://e-maxx.ru/algo/reverse_element
