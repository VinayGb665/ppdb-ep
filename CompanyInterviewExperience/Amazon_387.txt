Given an integer array of size n, find the maximum of the minimum’s of every window size in the array.  Note that window size varies from 1 to n.
Example: 
A Simple Solution is to go through all windows of every size, find maximum of all windows.  Below is implementation of this idea.

Run on IDE
Run on IDE
Run on IDE
Run on IDE
Output: 
Time complexity of above solution can be upper bounded by O(n3).  
We can solve this problem in O(n) time using an Efficient Solution.  The idea is to extra space.  Below are detailed steps.
Step 1:  Find indexes of next smaller and previous smaller for every element.  Next smaller is the nearest smallest element on right side of arr[i]. Similarly, previous smaller element is the nearest smallest element on left side of arr[i].
If there is no smaller element on right side, then next smaller is n.If there is no smaller on left side, then previous smaller is -1.
For input {10, 20, 30, 50, 10, 70, 30}, array of indexes of next smaller is {7, 4, 4, 4, 7, 6, 7}.
For input {10, 20, 30, 50, 10, 70, 30}, array of indexes of previous smaller is  {-1, 0, 1, 2, -1, 4, 4}
This step can be done in O(n) time using the approach discussed in next greater element.
Step 2: Once we have indexes of next and previous smaller, we know that arr[i] is a minimum of a window of length “right[i] – left[i] – 1”.  Lengths of windows for which the elements are minimum are {7, 3, 2, 1, 7, 1, 2}.  This array indicates, first element is minimum in window of size 7, second element is minimum in window of size 3, and so on.
Create an auxiliary array ans[n+1] to store the result.  Values in ans[] can be filled by iterating through right[] and left[] 
We get the ans[] array as {0, 70, 30, 20, 0, 0, 0, 10}. Note that ans[0]  or answer for length 0 is useless.
Step 3:Some entries in ans[] are 0 and yet to be filled. For example, we know maximum of minimum for lengths 1, 2, 3 and 7 are 70, 30, 20 and 10 respectively, but we don’t know the same for lengths 4, 5 and 6.
Below are few important observations to fill remaining entries
a) Result for length i, i.e. ans[i] would always be greater or same as result for length i+1, i.e., ans[i+1].
b) If ans[i] is not filled it means there is no direct element which is minimum of length i and therefore either the element of length ans[i+1], or ans[i+2], and so on is same as ans[i]
So we fill rest of the entries using below loop.
Below is  implementation of above algorithm.

Run on IDE
Run on IDE
Output: 
Time Complexity: O(n)
Auxiliary Space: O(n)
