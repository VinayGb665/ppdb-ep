There are several primality test available to check whether the number is prime or not like Fermat’s Theorem, Miller-Rabin Primality test and alot more. But problem with all of them is they all are probabilistic in nature. So, here comes one another method i.e AKS primality test (Agrawal–Kayal–Saxena primality test) and it is deterministically correct for any general number.
Features of AKS primality test :
1. The AKS algorithm can be used to verify the primality of any general number given.
2. The maximum running time of the algorithm can be expressed as a polynomial over the number of digits in the target number.
3. The algorithm is guaranteed to distinguish deterministically whether the target number is prime or composite.
4. The correctness of AKS is not conditional on any subsidiary unproven hypothesis.
The AKS primality test is based upon the following theorem: An integer n greater than 2 is prime if and only if the polynomial congruence relation

holds for some a coprime to n. Here x is just a formal symbol .
The AKS test evaluates the equality by making complexity dependent on the size of r . This is expressed as

which can be expressed in simpler term as

for some polynomials f and g .
This congruence can be checked in polynomial time when r is polynomial to the digits of n. The AKS algorithm evaluates this congruence for a large set of a values, whose size is polynomial to the digits of n. The proof of validity of the AKS algorithm shows that one can find r and a set of a values with the above properties such that if the congruences hold then n is a power of a prime. The brute force approach would require the expansion of the (x – a)^n polynomial and a reduction (mod n) of the resulting n + 1 coefficients .
As a should be co-prime to n. So, to implement this algorithm we can check by taking a = 1, but for large values of n we should take large values of a.
The algorithm is based on the condition that if n is any number, then it is prime if,
( x – 1 )^n – ( x^n – 1) is divisible by n.
Checking for n = 3 :
         (x-1)^3 – (x^3 – 1)
            = (x^3 – 3x^2 + 3x – 1) – (x^3 – 1)
            = -3x^2 + 3x
As all the coefficients are divisible by n i.e. 3, so 3 (n) is prime. As the number increases, size increases.
The code here is based on this condition and can check primes till 64 .
Below is the implementation of above approach:

Run on IDE
Run on IDE
Run on IDE
Run on IDE
Run on IDE

References:
https://en.wikipedia.org/wiki/AKS_primality_test
https://rosettacode.org/wiki/AKS_test_for_primes#C
https://www.youtube.com/watch?v=HvMSRWTE2mI
