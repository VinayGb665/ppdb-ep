Given an input string and a dictionary of words, find out if the input string can be segmented into a space-separated sequence of dictionary words. See following examples for more details.
This is a famous Google interview question, also being asked by many other companies now a days.
Recursive implementation:
The idea is simple, we consider each prefix and search it in dictionary.  If the prefix is present in dictionary,  we recur for rest of the string (or suffix).  If the recursive call for suffix returns true, we return true, otherwise we try next prefix. If we have tried all prefixes and none of them resulted in a solution, we return false.
We strongly recommend to see substr function which is used extensively in following implementations.
Run on IDE
Dynamic Programming
Why Dynamic Programming?  The above problem exhibits overlapping sub-problems. For example, see the following partial recursion tree for string “abcde” in worst case.

Run on IDE
Optimized Dynamic Programming:
In this approach, apart from the dp table, we also maintain all the indexes which have matched earlier. Then we will check the substrings from those indexes to the current index. If anyone of that matches then we can divide the string up to that index.
In this program, we are using some extra space. However, its time complexity is O(n*s) where s is the length of the largest string in the dictionary and n is the length of the given string.
Run on IDE
Word Break Problem | (Trie solution)
Exercise:
The above solutions only finds out whether a given string can be segmented or not.  Extend the above Dynamic Programming solution to print all possible partitions of input string.
Examples:
Refer below  post for solution of exercise.
Word Break Problem using Backtracking
