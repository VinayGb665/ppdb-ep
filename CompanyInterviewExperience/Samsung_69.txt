There are n stairs, a person standing at the bottom wants to reach the top. The person can climb either 1 stair or 2 stairs at a time. Count the number of ways, the person can reach the top.

Consider the example shown in diagram.   The value of n is 3. There are 3 ways to reach the top. The diagram is taken from Easier Fibonacci puzzles
 
 
 
 
 
 
 
More Examples: 
We can easily find recursive nature in above problem. The person can reach n’th stair from either (n-1)’th stair or from (n-2)’th stair.  Let the total number of ways to reach n’t stair be ‘ways(n)’.  The value of ‘ways(n)’ can be written as following. 
The above expression is actually the expression for Fibonacci numbers, but there is one thing to notice, the value of ways(n) is equal to fibonacci(n+1).
ways(1) = fib(2) = 1
ways(2) = fib(3) = 2
ways(3) = fib(4) = 3
So we can use function for fibonacci numbers to find the value of ways(n). Following is C++ implementation of the above idea.

Run on IDE
Run on IDE
Run on IDE
Run on IDE
Run on IDE

The time complexity of the above implementation is exponential (golden ratio raised to power n).  It can be optimized to work in O(Logn) time using the previously discussed Fibonacci function optimizations. 
Generalization of the above problem
How to count number of ways if the person can climb up to m stairs for a given value m? For example if m is 4, the person can climb 1 stair or 2 stairs or 3 stairs or 4 stairs at a time.
We can write the recurrence as following. 
Following is the implementation of above recurrence.

Run on IDE
Run on IDE
Run on IDE
Run on IDE
Run on IDE

The time complexity of above solution is exponential.  It can be optimized to O(mn) by using dynamic programming.  Following is dynamic programming based solution.  We build a table res[] in bottom up manner.

Run on IDE
Run on IDE
Run on IDE
Run on IDE
Run on IDE

