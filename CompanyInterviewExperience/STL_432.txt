After going through the template definition of various STL algorithms like std::nth_element, std::sort, you must have found their template definition consisting of objects of type Random-access Iterator. So what are they and why are they used ?
Random-access iterators are one of the five main types of iterators present in C++ Standard Library, others being Input iterators, Output iterator, Forward iterator and Bidirectional iterator .
Random-access iterators are iterators that can be used to access elements at an arbitrary offset position relative to the element they point to, offering the same functionality as pointers. Random-access iterators are the most complete iterators in terms of functionality. All pointer types are also valid random-access iterators.
It is to be noted that containers like vector, deque support random-access iterators. This means that if we declare normal iterators for them, and then those will be random-access iterators, just like in case of list, map, multimap, set and multiset they are bidirectional iterators.

So, from the above hierarchy it can be said that random-access iterators are the strongest of all iterator types.
Salient Features
So, the following two expressions are valid if A and B are Random-access iterators:
Run on IDE
Output:
So, as we can see here we can both access as well as assign value to the iterator, therefore the iterator is a random-access iterator.

So, the following two expressions are valid if A is a random-access iterator:
Run on IDE
Output:
Since, we are starting from the end of the vector and then moving towards the beginning by decrementing the pointer, which shows that decrement operator can be used with such iterators.

Run on IDE
Output:
Here, since i1 is pointing to beginning and i2 is pointing to end , so i2 will be greater than i1 and also difference between them will be the total distance between them.

Run on IDE
Output:
Practical implementation
After understanding its features, it is very important to learn about its practical implementation as well. As told earlier, Random-access iterators can be used for all purposes and in every scenario. The following STL algorithm shows one of its practical implementations:
Run on IDE
Here, we can see that we have made use of Random-access iterators, as there is no other type of iterator which supports arithmetic operators, that is why we have used it.

Infact if you are thinking of uses of random-access iterators, then you can use random-access iterator in place of any other type of iterator, since it is the strongest and the best type of iterator available in C++ Standard library.
