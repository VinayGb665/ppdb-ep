Factorial of a non-negative integer, is multiplication of all integers smaller than or equal to n. For example factorial of 6 is 6*5*4*3*2*1 which is 720.

We have discussed simple program for factorial.
How to compute factorial of 100 using a C/C++ program?
Factorial of 100 has 158 digits.  It is not possible to store these many digits even if we use long long int. 
Examples : 
Following is a simple solution where we use an array to store individual digits of the result.  The idea is to use basic mathematics for multiplication.  
The following is detailed algorithm for finding factorial.
factorial(n)
1) Create an array ‘res[]’ of MAX size where MAX is number of maximum digits in output.
2) Initialize value stored in ‘res[]’ as 1 and initialize ‘res_size’ (size of ‘res[]’) as 1.
3) Do following for all numbers from x = 2 to n.
……a) Multiply x with res[] and update res[] and res_size to store the multiplication result.
How to multiply a number ‘x’ with the number stored in res[]?
The idea is to use simple school mathematics.  We one by one multiply x with every digit of res[].  The important point to note here is digits are multiplied from rightmost digit to leftmost digit.  If we store digits in same order in res[], then it becomes difficult to update res[] without extra space.  That is why res[] is maintained in reverse way, i.e., digits from right to left are stored.
multiply(res[], x)
1) Initialize carry as 0.
2) Do following for i = 0 to res_size – 1
….a) Find value of res[i] * x + carry.  Let this value be prod.
….b) Update res[i] by storing last digit of prod in it.
….c) Update carry by storing remaining digits in carry.
3) Put all digits of carry in res[] and increase res_size by number of digits in carry.
Below is the implementation of above algorithm.

Run on IDE
Run on IDE
Run on IDE
Run on IDE

The above approach can be optimized in many ways.  We will soon be discussing optimized solution for same.
