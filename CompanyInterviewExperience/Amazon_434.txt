In this article, first count of possible BST (Binary Search Trees)s is discussed, then construction of all possible BSTs.
How many structurally unique BSTs for keys from 1..N?
We strongly recommend you to minimize your browser and try this yourself first.
We know that all node in left subtree are smaller than root and in right subtree are larger than root so if we have  ith number as root, all numbers from 1 to  i-1  will be in left subtree and i+1 to N will be in right subtree.  If 1 to i-1 can form x different trees and i+1 to N can from y different trees then we will have x*y total trees when ith number is root and we also have N choices for root also so we can simply iterate from 1 to N for root and another loop for left and right subtree.  If we take a closer look, we can notice that the count is basically n’th Catalan number.  We have discussed different approaches to find n’th Catalan number here. 
 
How to construct all BST for keys 1..N?
The idea is to maintain a list of roots of all BSTs.  Recursively construct all possible left and right subtrees.  Create a tree for every pair of left and right subtree and add the tree to list.  Below is detailed algorithm. 
Below is C++ implementation of above idea.
Run on IDE
Output:
