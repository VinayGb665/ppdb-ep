Depth First Traversal (or Search) for a graph is similar to Depth First Traversal (DFS) of a tree.  The only catch here is, unlike trees, graphs may contain cycles, so we may come to the same node again. To avoid processing a node more than once, we use a boolean visited array. 
For example, a DFS of below graph is “0 3 4 2 1”, other possible DFS is “0 2 1 3 4”.

We have discussed recursive implementation of DFS in previous in previous post.  In the post, iterative DFS is discussed. The recursive implementation uses function call stack. In iterative implementation, an explicit stack is used to hold visited vertices.  
Below is implementation of Iterative DFS. The implementation is similar to BFS, the only difference is queue is replaced by stack.
Run on IDE
Run on IDE
Output: 
Note that the above implementation prints only vertices that are reachable from a given vertex. For example, if we remove edges 0-3 and 0-2, the above program would only print 0. To print all vertices of a graph, we need to call DFS for every vertex.  Below is implementation for the same.
Run on IDE
Run on IDE

Like recursive traversal, time complexity of iterative implementation is O(V + E).
