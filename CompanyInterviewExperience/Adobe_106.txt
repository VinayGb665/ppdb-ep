The problem is opposite of this post.  We are given a Queue data structure that supports standard operations like enqueue() and dequeue().  We need to implement a Stack data structure using only instances of Queue and queue operations allowed on the instances.

A stack can be implemented using two queues. Let stack to be implemented be ‘s’ and queues used to implement be ‘q1’ and ‘q2’. Stack ‘s’ can be implemented in two ways:
Method 1 (By making push operation costly)
This method makes sure that newly entered element is always at the front of ‘q1’, so that pop operation just dequeues from ‘q1’.   ‘q2’ is used to put every new element at front of ‘q1’.
Run on IDE
Output : 
Method 2 (By making pop operation costly)
In push operation, the new element is always enqueued to q1. In pop() operation, if q2 is empty then all the elements except the last, are moved to q2. Finally the last element is dequeued from q1 and returned.
Run on IDE
Output : 
References:
Implement Stack using Two Queues
